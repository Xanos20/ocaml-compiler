# 1 "src/Lexer.mll"
 
open Lexing
open Parser

exception Lexer_error of string

let symbols : (string * Parser.token) list =
  [
    ( "(", LPAREN     )
  ; ( ")", RPAREN     )
  ; ( "+", PLUS       )
  ; ( "-", SUBT       )
  ; ( "*", MULT       )
  ; ( "/", DIVD       )
  ; ( "if", IF        )
  ; ( "<=", LESSEQLS  )
  ; ( "==", ISEQUAL   )
  ; ( "=" , EQUALS    )
  ; ( "->", ARROW     )
  ]


let keywords : (string * Parser.token) list =
  [
    ( "in", IN        )
 (* ; ( "var ", VAR )  *)
  ; ( "let" , LET     )
  ; ( "fun" , FUN     )
  ; ( "fix" , FIX     )
  ; ( "funcall", FUNCALL )
  ; ( "and" , AND     )
  ; ( "or"  , OR      )
  ; ( "xor" , XOR     )
  ; ( "not" , NOT     )
  ; ( "nand", NAND    )
  ; ( "nor" , NOR     )
  ; ( "nxor", NXOR    )
  ]

let create_keyword lexbuf =
  let str = lexeme lexbuf in
  List.assoc str keywords

let create_symbol lexbuf =
  let str = lexeme lexbuf in
  List.assoc str symbols



let create_bool lexbuf = lexeme lexbuf |> bool_of_string
let create_int lexbuf = lexeme lexbuf |> int_of_string


# 56 "src/Lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base =
   "\000\000\248\255\249\255\026\000\013\000\011\000\016\000\026\000\
    \018\000\001\000\002\000\251\255\002\000\033\000\015\000\001\000\
    \002\000\007\000\103\000\255\255\014\000\031\000\252\255\013\000\
    \024\000\027\000\021\000\038\000\041\000\044\000\034\000\035\000\
    \250\255\028\000\045\000\033\000\037\000\039\000\047\000\062\000\
    \050\000";
  Lexing.lex_backtrk =
   "\255\255\255\255\255\255\006\000\006\000\006\000\006\000\006\000\
    \006\000\004\000\007\000\255\255\004\000\006\000\006\000\002\000\
    \002\000\002\000\001\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\005\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255";
  Lexing.lex_default =
   "\001\000\000\000\000\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\000\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\000\000\255\255\255\255\000\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255";
  Lexing.lex_trans =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\017\000\016\000\016\000\016\000\015\000\015\000\015\000\
    \017\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \017\000\000\000\000\000\000\000\000\000\000\000\000\000\017\000\
    \011\000\011\000\011\000\011\000\000\000\012\000\000\000\011\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\000\000\000\000\010\000\009\000\011\000\011\000\
    \011\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\006\000\002\000\002\000\002\000\002\000\013\000\002\000\
    \002\000\008\000\002\000\002\000\007\000\002\000\003\000\005\000\
    \002\000\002\000\002\000\002\000\014\000\002\000\002\000\002\000\
    \004\000\002\000\002\000\037\000\035\000\032\000\034\000\033\000\
    \032\000\020\000\025\000\021\000\022\000\032\000\028\000\026\000\
    \027\000\038\000\023\000\022\000\029\000\030\000\031\000\032\000\
    \032\000\032\000\036\000\032\000\040\000\039\000\024\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\032\000\032\000\032\000\032\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \019\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    ";
  Lexing.lex_check =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\015\000\016\000\000\000\015\000\016\000\
    \017\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\255\255\255\255\255\255\017\000\
    \000\000\000\000\000\000\000\000\255\255\000\000\255\255\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\255\255\255\255\000\000\000\000\009\000\010\000\
    \012\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\003\000\004\000\005\000\006\000\007\000\
    \008\000\014\000\013\000\020\000\021\000\023\000\024\000\025\000\
    \026\000\003\000\013\000\027\000\028\000\029\000\030\000\031\000\
    \033\000\034\000\003\000\035\000\036\000\037\000\013\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\038\000\039\000\038\000\040\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    ";
  Lexing.lex_base_code =
   "";
  Lexing.lex_backtrk_code =
   "";
  Lexing.lex_default_code =
   "";
  Lexing.lex_trans_code =
   "";
  Lexing.lex_check_code =
   "";
  Lexing.lex_code =
   "";
}

let rec token lexbuf =
   __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 66 "src/Lexer.mll"
                                                                 ( EOF )
# 194 "src/Lexer.ml"

  | 1 ->
# 67 "src/Lexer.mll"
                                                                 ( INT (int_of_string (lexeme lexbuf)) )
# 199 "src/Lexer.ml"

  | 2 ->
# 68 "src/Lexer.mll"
                                                                 ( token lexbuf )
# 204 "src/Lexer.ml"

  | 3 ->
# 69 "src/Lexer.mll"
                                                                 ( BOOL (bool_of_string (lexeme lexbuf)) )
# 209 "src/Lexer.ml"

  | 4 ->
# 70 "src/Lexer.mll"
                     ( create_symbol lexbuf )
# 214 "src/Lexer.ml"

  | 5 ->
# 71 "src/Lexer.mll"
                      ( create_keyword lexbuf )
# 219 "src/Lexer.ml"

  | 6 ->
# 72 "src/Lexer.mll"
                                                                 ( VAR (lexeme lexbuf) )
# 224 "src/Lexer.ml"

  | 7 ->
let
# 73 "src/Lexer.mll"
         c
# 230 "src/Lexer.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 73 "src/Lexer.mll"
                                                                 ( raise @@ Lexer_error ("Unexpected character: " ^ Char.escaped c) )
# 234 "src/Lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_token_rec lexbuf __ocaml_lex_state

;;

